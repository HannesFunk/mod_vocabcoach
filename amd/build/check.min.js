define("mod_vocabcoach/check",["exports","./repository","core/mustache","./general"],(function(_exports,_repository,_mustache,_general){var obj;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.changeMode=changeMode,_exports.init=void 0,_mustache=(obj=_mustache)&&obj.__esModule?obj:{default:obj};let vocabArrayJSON=null,modid=-1,knownCount=0,unknownCount=0,mode="front",force=!1;function addListeners(userid){document.addEventListener("click",(e=>{if(e.target.closest(Selectors.actions.checkTypedVocab))!function(userid){const currElementDataID=parseInt(document.getElementById("check-container").getAttribute("data-vocab-data-id"));if(-1!==currElementDataID&&vocabArrayJSON[0].dataid!==currElementDataID)return void console.log("currElementID does not equal 0-element in vocabArrayJSON");const typed=document.getElementById("input-vocab-front").value,correct=vocabArrayJSON[0].front;typed!==correct||force?typed===correct?(knownCount++,showNext()):document.getElementById("input-vocab-front").classList.add("wrong"):(0,_repository.updateVocabAJAX)(vocabArrayJSON[0].dataid,userid,!0).then((()=>{knownCount++,showNext()}))}(userid);else if(e.target.closest(Selectors.actions.revealCard)&&"type"!==mode){const label=e.target.closest(Selectors.actions.revealCard).getElementsByClassName("vc-check-label")[0];(0,_general.showElement)(label,!0)}else e.target.closest(Selectors.actions.updateVocab)?(vocabId=vocabArrayJSON[0].dataid,userId=userid,known="true"===e.target.getAttribute("data-vocabcoach-known"),-1===userId||force?(updateCount(known),showNext()):(0,_repository.updateVocabAJAX)(vocabId,userId,known).then((()=>{updateCount(known),showNext()}))):e.target.closest(Selectors.actions.endCheck)?location.href="../../mod/vocabcoach/view.php?id="+modid:e.target.closest(Selectors.actions.revealTypedVocab)?(document.getElementById("input-vocab-front").value=vocabArrayJSON[0].front,document.getElementById("input-vocab-front").disabled=!0,(0,_general.showElements)(["button-typed-vocab-next"],!0),(0,_general.showElements)(["button-typed-vocab-check","button-typed-vocab-reveal"],!1)):e.target.closest(Selectors.actions.typedVocabUnknown)&&((0,_general.showElements)(["button-typed-vocab-next"],!1),(0,_general.showElements)(["button-typed-vocab-reveal","button-typed-vocab-check"],!0),document.getElementById("input-vocab-front").value="",document.getElementById("input-vocab-front").disabled=!1,(0,_repository.updateVocabAJAX)(vocabArrayJSON[0].dataid,userid,!1).then((()=>{showNext()})));var vocabId,userId,known})),document.addEventListener("change",(e=>{e.target.closest(Selectors.formElements.mode)&&changeMode()})),document.addEventListener("keyup",(e=>{e.target.closest(Selectors.formElements.typedVocab)&&document.getElementById("input-vocab-front").classList.remove("wrong")}))}_exports.init=function(userid,addInfo,moduleid){let force_init=arguments.length>3&&void 0!==arguments[3]&&arguments[3];modid=moduleid,userid=parseInt(userid),force=force_init,-1===userid?getListVocab(addInfo):getBoxVocab(userid,addInfo,force),addListeners(userid),resetCheckFields()};const Selectors={actions:{revealCard:'[data-action="mod_vocabcoach/reveal-card"]',updateVocab:'[data-action="mod_vocabcoach/update-vocab"]',endCheck:'[data-action="mod_vocabcoach/end-check"]',modeChanged:'[data-action="mod-vocabcoach/change-mode"]',checkTypedVocab:'[data-action="mod-vocabcoach/typed-vocab-check"]',revealTypedVocab:'[data-action="mod-vocabcoach/typed-vocab-reveal"]',typedVocabUnknown:'[data-action="mod-vocabcoach/typed-vocab-unknown"]'},formElements:{mode:'[id="check-mode"]',typedVocab:'[id="input-vocab-front"]'}};function changeMode(){mode=document.getElementById("check-mode").value,"type"===mode?((0,_general.showElements)(["check-front","check-buttons"],!1),(0,_general.showElements)(["check-back","check-type-area"],!0),document.getElementById("input-vocab-front").value="",(0,_general.showElement)(document.getElementsByClassName("instruction-front-back-random")[0],!1)):((0,_general.showElements)(["check-front","check-buttons"],!0),(0,_general.showElements)(["check-type-area"],!1),(0,_general.showElement)(document.getElementsByClassName("instruction-front-back-random")[0],!0)),"front"!==mode&&"back"!==mode||resetCheckFields(mode)}function getBoxVocab(userid,stage,force){(0,_repository.getBoxArrayAJAX)(userid,modid,stage,force).then((response=>{vocabArrayJSON=response,showNext()}))}function getListVocab(listid){(0,_repository.getListArrayAJAX)(listid).then((response=>{vocabArrayJSON=response,showNext()}))}function showNext(){const currElementDataID=parseInt(document.getElementById("check-container").getAttribute("data-vocab-data-id"));if(-1!==currElementDataID&&vocabArrayJSON[0].dataid!==currElementDataID)return void console.log("currElementID does not equal 0-element in vocabArrayJSON");-1!==currElementDataID&&vocabArrayJSON.splice(0,1);const numberRemaining=vocabArrayJSON.length;if(document.getElementsByClassName("check-number-remaining")[0].innerHTML="Noch "+numberRemaining+" Vokabel"+(1===numberRemaining?"":"n"),0!==numberRemaining)if(document.getElementById("check-front").innerHTML=vocabArrayJSON[0].front,document.getElementById("check-back").innerHTML=vocabArrayJSON[0].back,document.getElementById("check-container").setAttribute("data-vocab-data-id",vocabArrayJSON[0].dataid),"random"===mode){resetCheckFields(0===Math.floor(2*Math.random()))}else"type"===mode?document.getElementById("input-vocab-front").value="":resetCheckFields(mode);else!function(){const templateData={known:knownCount,total:knownCount+unknownCount,message:getSummaryMessage()};fetch("../../mod/vocabcoach/templates/check_summary.mustache").then((res=>res.text())).then((template=>{const output=_mustache.default.render(template,templateData),summaryContainer=document.getElementsByClassName("check-summary")[0];summaryContainer.innerHTML=output,(0,_general.showElement)(summaryContainer,!0),(0,_general.showElements)(["check-box-front","check-box-back"],!1)}))}()}function resetCheckFields(side){(0,_general.showElement)("check-front","front"===side),(0,_general.showElement)("check-back","front"!==side)}function getSummaryMessage(){const ratio=knownCount/(unknownCount+knownCount);return ratio>.9?"Hervorragend!":ratio>.7?"Gut gemacht!":ratio>.5?"Du hast einiges erreicht!":ratio>.3?"Das kannst du besser!":"Hm. Da musst du nochmal ran!"}function updateCount(known){known?knownCount++:unknownCount++}}));

//# sourceMappingURL=check.min.js.map