define("mod_vocabcoach/lists",["exports","./repository","core/mustache","core/notification","core/log"],(function(_exports,_repository,_mustache,_notification,_log){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}let vocabcoachId;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=function(id){vocabcoachId=id,printLists(),document.addEventListener("click",(e=>{if(e.target.closest(Selectors.actions.deleteList))listid=e.target.getAttribute("data-list-id"),(0,_notification.saveCancel)("Bestätigung","Soll diese Liste wirklich gelöscht werden?","Bestätigen",(()=>{(0,_repository.deleteListAJAX)(listid).then((()=>{document.querySelectorAll('tr[data-list-id="'+listid+'"]')[0].remove()}))}),null).catch((error=>_log.default.debug(error)));else if(e.target.closest(Selectors.actions.checkList))location.href="check.php?id="+vocabcoachId+"&mode=list&listid="+e.target.getAttribute("data-list-id");else if(e.target.closest(Selectors.actions.showPdf)){const menuItem=e.target.closest(Selectors.actions.showPdf);window.open("pages/vocablist_pdf.php?listid="+menuItem.getAttribute("data-list-id"),"_blank").focus()}else if(e.target.closest(Selectors.actions.editList)){const menuItem=e.target.closest(Selectors.actions.editList);location.href="add_vocab.php?id="+vocabcoachId+"&mode=edit&listid="+menuItem.getAttribute("data-list-id")}var listid}))},_exports.printLists=printLists,_mustache=_interopRequireDefault(_mustache),_log=_interopRequireDefault(_log);const Selectors={actions:{deleteList:'[data-action="mod_vocabcoach/delete_list"]',checkList:'[data-action="mod_vocabcoach/check_list"]',showPdf:'[data-action="mod_vocabcoach/show_pdf"]',editList:'[data-action="mod_vocabcoach/edit_list"]'}};function printLists(){let json=null,template=null;const getData=(0,_repository.getListsAJAX)(vocabcoachId).then((res=>{json={lists:res,loading:!1},0===res.length&&(json.emptyList=!0)})),fetchTemplate=fetch("http://localhost/moodle/mod/vocabcoach/templates/lists.mustache").then((res=>res.text())).then((text=>{template=text}));Promise.all([getData,fetchTemplate]).then((()=>{_mustache.default.parse(template);const output=_mustache.default.render(template,json);return document.querySelectorAll('[role="main"]')[0].innerHTML=output,!0}))}}));

//# sourceMappingURL=lists.min.js.map